<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>

    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás forrása:
		<link xlink:href="BookResources/turing/">turing/</link>          
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
	</para>
	<para>
		A program ciklusokat használva dolgoztatja meg a procit. Sokszor véletlenül készítünk végtelen ciklusokat. Az alábbi példa azt az esetet mutatja be ahol csak 1 magot használ 100%-on.
		<programlisting language="c">
		<![CDATA[
		int main()
		{
		for(;;);
		}
		]]>
		</programlisting>
	
        <figure>
          <title>1 magot használ 100%-on</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/1core100.png" format="PNG"/>
                </imageobject>
              </mediaobject>
        </figure>

        </para>
	<para>
	A következő példa már minden magot használ 100%-on.
	       <programlisting language="c">
		<![CDATA[   
			#include <omp.h>

			int main()
			{
			#pragma omp parallel
				{
				for(;;);
				}

			}
		]]>
		</programlisting>  
	Ennek a programnak a futtatásához szükséges a "-fopenmp" használata, a multi threading miatt.

            <figure>
          <title>minden magot használ 100%-on</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/allCores100.png" format="PNG"/>
                </imageobject>
              </mediaobject>
        </figure>

	</para>
	<para>
	Utolsó példánk mikor a program 0%-ban használja ki a procit. Ezt sleep parancssal érhetjük el a legegyszerübben.
	<programlisting language="c">
		<![CDATA[
		#include <unistd.h>

		int main()
		{
			for(;;) sleep(1);
		}
		]]>
		</programlisting>

        
        <figure>
          <title>0%-ban használja ki a procit</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="images/0anyCores.png" format="PNG"/>
                </imageobject>
              </mediaobject>
        </figure>

	</para>
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása:  <link xlink:href="BookResources/turing/">/turing</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
	Elsőnek is segédváltozóval oldjuk meg a problémát. Azaz létrehozunk még egy változót amiben tárolhatjuk az értéket.
	<programlisting><![CDATA[
		#include <stdio.h>

		int main()
		{
			printf("segédváltozó csere\n\n");
		int a=5;
		int b=7;

			printf("eredeti: a=%d b=%d\n",a,b);
		int c=a;
		a=b;
		b=c;

			printf("csere: a=%d b=%d\n",a,b);

			return 0;
		}
		]]></programlisting> 
	
	</para>
	<para>
	Ezután segédváltozó nélkül, szimpla összeadás kivonással oldjuk meg.
	<programlisting><![CDATA[
		#include <stdio.h>

		int main()
		{
			printf("valtozocsere valtozo nelkul\n\n");
		int a=5;
		int b=7;
			printf("eredeti: a=%d b=%d\n",a,b);
		a=a+b;
		b=a-b;
		a=a-b;
			printf("felcserelt: a=%d b=%d\n",a,b);
			return 0;
		}
	]]></programlisting>
	</para>
	<para>
	Végül exor-módszerrel is megoldjuk.
	<programlisting><![CDATA[
	#include <stdio.h>

	int main()
	{
		printf("Csere exorral\n\n");
		int a=5;
		int b=7;
		printf("Eredeti értékek: a=%d b=%d\n",a,b);
		a=a^b;
		b=a^b;
		a=a^b;
		printf("Felcserélt értékek: a=%d b=%d\n", a,b);
		return 0;
	}
	]]></programlisting>
	</para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása:<link xlink:href="BookResources/turing/">/turing</link>  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
	<para>
	Labdapattogtatást egyszerű feltételvizsgálatokkal oldhatjuk meg, felvesszük a terminál méretét (initscr() function-nal), a labda kezdő helyét, gyorsaságát. Miután megadtuk a kezdő adatokat, "if" függvényekkel vizsgáljuk, hogy a labda az ablak széléhez ért-e, és irányt változtatunk. A labda gyorsaságának csökkentéséhez használhatjuk a usleep() függvényt, kép frissitéshez pedig a refresh()-t.
	<programlisting><![CDATA[
		#include <stdio.h>
		#include <curses.h>
		#include <unistd.h>

		int
		main ( void )
		{
		    WINDOW *ablak;
		    ablak = initscr ();

			int x = 0;
			int y = 0;
			int xnov = 1;
			int ynov = 1;
			int mx;
			int my;

		    for ( ;; ) {

			getmaxyx ( ablak, my , mx );

			mvprintw ( y, x, "O" );

			refresh ();
			usleep ( 100000 );
			clear();

			x = x + xnov;
			y = y + ynov;

			if ( x>=mx-1 )
			{
			    xnov = xnov * -1;
			}
			if ( x<=0 )
			{
			    xnov = xnov * -1;
			}
			if ( y<=0 )
			{
			    ynov = ynov * -1;
			}
			if ( y>=my-1 )
			{
			    ynov = ynov * -1;
			}
		    }

		    return 0;
		}
	
	]]></programlisting>
	</para>
	<para>
	Ha nagyon kalandvágyóak vagyunk if nélkül is elérhetjük ezt.
	<programlisting><![CDATA[
		#include <iostream>
		#include <iomanip>
		#include <unistd.h>

		using namespace std;

		int rajz(int x,int y, int h, int w)
		{
		    for(int i=1;i<=x;i++)
		    {
			cout<<"X";
			for(int j=1;j<=w;j++)
			{
				cout<<" ";
			}
			cout<<" X"<<endl;
		    }
		    cout<<"X";
		    for(int i=0;i<y;i++)
		    {
			cout<<" ";
		    }
		    cout<<"o";
		    for(int i=y;i<w;i++)
		    {
			cout<<" ";
		    }
		    cout<<"X"<<endl;
		    for(int i=x;i<h;i++)
		    {
			cout<<"X";
			for(int j=1;j<=w;j++)
			{
				cout<<" ";
			}
			cout<<" X"<<endl;
		    }

		    return 0;
		}

		int main()
		{
		    int x=0,y=0;
		    int width,height;

		    cout<<"Add meg a terulet szelesseget es magassagat, amin szeretned, hogy pattogjon a labda! \n";
		    cin>>height>>width;
		    while(true)
		    {
			system("clear");
			cout<<" ";
			for(int i=0;i<width+1;i++)
			{
				cout<<"X";
			}
			cout<<endl;
			rajz(abs(height-(x++%(height*2))),abs(width-(y++%(width*2))),height,width);
			cout<<" ";
			for(int i=0;i<width+1;i++)
			{
				cout<<"X";
			}
			cout<<endl;
			usleep(50000);
		    }
		    return 0;
		}

	]]></programlisting>
	</para>
    </section>                     


    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="BookResources/turing/">/turing/</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... 
        </para>
	<para>
	Az 'int' méretét, és hogy hány bitet foglal, bitshifteléssel nézzük meg. A 'while' függvényben folyamatosan balra lépegetünk, és minden lépésnél növeljük a 'hossz' változót, amig a 'wat' változó nulláig nem ér.
	<programlisting><![CDATA[
	#include <stdio.h>
	int
	main (void)
	{
	  int hossz = 0;
	  int wat = 1;
	  do
	    ++hossz;
	  while (wat <<= 1);
	  printf ("szohossz: %d bites\n", hossz);
	  return 0;
	}
	]]></programlisting>
	Az 'int' 32 bites szó.
	</para>

	<para>
	BogoMips
	</para>

	<para>
	A BogoMips egy algoritmus ami a Linux kernelben méri fel a processzor sebességét az ú.n. 'busy-loop' konfigurálásához.
A 'busy-loop' annyit jelent, hogy egy process folytonosan egy feltételt vizsgál, amíg az igazat ad vissza értékül, BogoMips azt mutatja hány mp-ig áll a proci, tehát nem csinál semmit.
	<programlisting><![CDATA[
	#include <time.h>
	#include <stdio.h>

	void
	delay (unsigned long long int loops)
	{
	unsigned long long int i;
	for (i = 0; i < loops; i++);
	}

	int
	main (void)
	{
	unsigned long long int loops_per_sec = 1;
	unsigned long long int ticks;

	printf ("Calibrating delay loop..");
	fflush (stdout);

	while ((loops_per_sec <<= 1))
	{
	ticks = clock ();
	delay (loops_per_sec);
	ticks = clock () - ticks;

	printf ("%llu %llu\n", ticks, loops_per_sec);

	if (ticks >= CLOCKS_PER_SEC)
	{
	loops_per_sec = (loops_per_sec / ticks) * CLOCKS_PER_SEC;

	printf ("ok - %llu.%02llu BogoMIPS\n", loops_per_sec / 500000,
	(loops_per_sec / 5000) % 100);

	return 0;
	}
	}

	printf ("failed\n");
	return -1;
	}
	]]></programlisting>
	 Bitshifteléssel megyünk a while ciklusban végig a 2 hatványain.
            A ticks-ben tároljuk mennyi processzoridőt használt a CPU eddig, majd a delay() függvénynek
            átadjuk loops_per_sec változót (aminek a bitjei mindig odébb vannak eggyel tolva), ahol elszámolunk
            0-tól a változó végéig. 
            Ezután megint lekérjük a processzoridőt kivonva az előző ticks-ben tárolt CPU időt, így megkapjuk,
            mennyi ideig tartott a elszámolni a loops_per_sec változó végéig.
            Majd megnézzük if-el, hogy nagyobb vagy egyenlő a kapott ticks, mint a CLOCKS_PER_SEC aminek az értéke
            1 millió és ha ez igaz, akkor kiszámoljuk, hogy milyen érték kell ahhoz,hogy a ciklusértékéket megkapjuk, ezzel 
meghatározva a CPU sebességét. 
	
	
	</para>
    </section>
    <section>
        <title>Helló, Google!</title>
        <para> Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap
            Page-Rank értékét! </para>
        <para> Megoldás forrása: <link
                xlink:href="https://github.com/RakeTheRape/BHAKSZ/tree/master/turing"
                >https://github.com/RakeTheRape/BHAKSZ/tree/master/turing</link>
        </para>
        <para> Tanulságok, tapasztalatok, magyarázat... </para>
        <para> A Page Rank az interneten található oldalakat rangsorolja. Kezdetben minden oldalnak
            van egy szavazati pontja és ha az egyik linkeli a másikat, akkor a linkelt oldal
            megkapja a linkelő pontját. Tehát egy oldal akkor lesz előkelőbb helyen egy google
            kereséskor, ha minél több másik oldal linkel rá, illetve ezen oldalakra is minél többen
            linkelnek, annál jobb minőségűnek fog számítani egy linkelése vagy szavazata. <programlisting><![CDATA[
		#include <stdio.h>
		#include <math.h>

		void
		kiir (double tomb[], int db)
		{
		  int i;

		  for (i = 0; i < db; ++i)
		    printf ("%f\n", tomb[i]);
		}

		double
		tavolsag (double PR[], double PRv[], int n)
		{
		  double osszeg = 0.0;
		  int i;

		  for (i = 0; i < n; ++i)
		    osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);

		  return sqrt(osszeg);
		}

		int
		main (void)
		{

		  double L[4][4] = {
		    {0.0, 0.0, 1.0 / 3.0, 0.0},
		    {1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0},
		    {0.0, 1.0 / 2.0, 0.0, 0.0},
		    {0.0, 0.0, 1.0 / 3.0, 0.0}
		  };

		  double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
		  double PRv[4] = { 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0, 1.0 / 4.0 };

		  int i, j;

		  for (;;)
		    {

		      for (i = 0; i < 4; ++i)
			{
			  PR[i] = 0.0;
			  for (j = 0; j < 4; ++j)
			    PR[i] += (L[i][j] * PRv[j]);
			}
		      if (tavolsag (PR, PRv, 4) < 0.00000001)
			break;

		      for (i = 0; i < 4; ++i)
			PRv[i] = PR[i];

		    }

		  kiir (PR, 4);

		  return 0;
		}

	]]></programlisting>
        </para>
        <para> Az L nevű többdimenziós tömbben vannak rögzítve mátrix formájában az adatok a
            linkelésekről, melyik oldalra melyik oldal linkel és mennyit. A végtelen ciklusban
            nullázzuk PR összes elemét, majd rögtön hozzáadjuk az L mátrix és PRv vektor
            szorzatainak értékét. Ezután a távolság metódusunkban végigmegyünk a PR és PRv
            vektorokon és egy változóban eltároljuk ezek különbségének a négyzetét (hogy ne legyen
            negatív) és gyököt vonva visszaadjuk az értéket, amely ha kisebb mint 0.00000001, akkor
            kilépünk a végtelen ciklusból, ellenkező esetben pedig PRv tömböt feltöltjük PR
            elemeivel. Végül kiiratjuk az értékeket. </para>
    </section>
                                                                                                                                                                                                                                                                                                                                                        
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <section>
            <para> Írj R szimulációt a Monty Hall problémára! </para>
            <para> Megoldás videó: <link
                    xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan"
                    >https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
            </para>
            <para> Megoldás forrása: <link
                    xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R"
                    >https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
            </para>
            <para> A Monty Hall probléma egy amerikai televíziós vetélekedőben jelent meg, ahol a
                műsor végén a játékosnak 3 ajtó közül kellett választania. A nyeremény csak az egyik
                ajtó mögött volt. A játékos választása után a műsorvezető kinyitott egy üres ajtót
                és feltette a kérdést, hogy fenntartja-e a választását a játékos vagy egy másik
                ajtót választ. A Monty Hall probléma kérdése, hogy számít-e, hogy a játékos
                megváltoztatja-e a választását. Józan ésszel gondolkodva nem számít, mivel a maradék
                két ajtó közül az egyik mögött van a nyeremény, így 50-50% az esélye annak, hogy
                nyerünk. A feladvány bizonyítása több matematikai professzoron is kifogott, köztük a
                világhírű Erdős Pálon is, akit csak a számítógépes szimuláció győzött meg, ami
                alapján számít, hogy másik ajtót választunk, ugyanis ekkor megduplázódik az esélyünk
                a nyerésre. Amikor először választunk ajtót, akkor 1/3 az esélye annak, hogy
                eltaláljuk a nyertes ajtót és 2/3, hogy nem. Ezután a játékvezető kinyit egy ajtót,
                amelyik üres és ha nem változtatunk a döntésünkön, továbbra is 1/3 lesz annak az
                esélye, hogy nyertünk. Viszont mivel már csak 2 ajtó van a játékban ezért ha
                változtatunk, akkor 2/3 lesz az esélyünk a nyerésre. <programlisting>
<![CDATA[
kiserletek_szama=1000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)
for (i in 1:kiserletek_szama) {
    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }
    musorvezeto[i] = mibol[sample(1:length(mibol),1)]
}
nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)
for (i in 1:kiserletek_szama) {
    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}
valtoztatesnyer = which(kiserlet==valtoztat)
sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)
]]>
</programlisting>
            </para>
            <para> Először eltároljuk, hogy hány kisérletet végezzünk el, majd a kiserlet és jatekos
                vektorokban kisorsolunk 1 és 3 között véletlenszerűen számokat. A műsorvezető
                vektorát beállítjuk a kísérletek számával. Ezután egy for ciklussal végigmegyünk
                minden kísérleten és ha kiserlet i-edig értéke megyegyezik a a játékos i-edig
                találatával, az jelenti, hogy eltalálta a játékos a nyereményt és a mibol vektorba
                az a két érték kerül be amelyeket a játékos nem választott. (Ez a két érték az üres
                ajtókat jelenti ebben az esetben.) </para>
            <para> Ha a játékos nem találta el elsőre a kiserlet vektorban található számot, akkor a
                mibol vektorba már csak 1 egy érték kerülhet, az amelyik nem a nyeremény és nem a
                játékos által kiválasztott érték. Ezután a musorvezeto vektorba berakjuk a mibol
                vektorban található számot, illetve ha két érték van benne akkor a kettőből az
                egyiket véletlenszerűen. </para>
            <para> Ezután értkezik a kiértékelés. A nemvaltoztatesnyer vektorba kerülnek azok az
                esetek, amikor elsőre eltalálja a játékos a megfelelő ajtót. Megint végigmegyünk a
                kísérleteken és a holvalt vektorba azok vagy az az érték kerül az 1, 2 és 3 közül
                amely nem egyenlő a műsorvezető és a játékos által választottal vagyis ekkor ha
                váltana a játékos akkor nyerne. A változtat vektorba pedig a holvalt vektor elemei
                közül az egyiket rakjuk át. </para>
            <para> A valtoztatesnyer vektorba pedig azok az értékek kerülnek, amelyek a kiserlet
                vektorba és a változtat vektorba találhatóak, vagyis ekkor az az ajtó a nyertes
                ,amelyiket másodjára választanánk. Eztuán pedig kiiratjuk az esetek számait: </para>
            <programlisting language="R">
<![CDATA[
[1] "Kiserletek szama: 1000000"
> length(nemvaltoztatesnyer)
[1] 333590
> length(valtoztatesnyer)
[1] 666410
> length(nemvaltoztatesnyer)/length(valtoztatesnyer)
[1] 0.5005777
> length(nemvaltoztatesnyer)+length(valtoztatesnyer)
[1] 1000000
]]>
</programlisting>
        </section>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>

        <para>
            A természetes számok építőelemei a prímszámok. Abban az értelemben, 
            hogy minden természetes szám előállítható prímszámok szorzataként.
            Például 12=2*2*3, vagy például 33=3*11.
        </para>
        <para>
            Prímszám az a természetes szám, amely csak önmagával és eggyel 
            osztható. Eukleidész görög matematikus már Krisztus előtt tudta, 
            hogy végtelen sok prímszám van, de ma sem tudja senki, hogy 
            végtelen sok ikerprím van-e. Két prím ikerprím, ha különbségük 2.
        </para>
        <para>
            Két egymást követő páratlan prím között a legkisebb távolság a 2, 
            a legnagyobb távolság viszont bármilyen nagy lehet! Ez utóbbit 
            könnyű bebizonyítani. Legyen n egy tetszőlegesen nagy szám. 
            Akkor szorozzuk össze n+1-ig a számokat, azaz számoljuk ki az 
            1*2*3*… *(n-1)*n*(n+1) szorzatot, aminek a neve (n+1) faktoriális, 
            jele (n+1)!.
        </para>
        <para>
            Majd vizsgáljuk meg az a sorozatot:
        </para>    
        <para>
            (n+1)!+2, (n+1)!+3,… , (n+1)!+n, (n+1)!+ (n+1) ez n db egymást követő azám, ezekre (a jól ismert
            bizonyítás szerint) rendre igaz, hogy            
        </para>    
        <itemizedlist>
            <listitem>
                <para>(n+1)!+2=1*2*3*… *(n-1)*n*(n+1)+2, azaz 2*valamennyi+2, 2 többszöröse, így ami osztható kettővel</para>
            </listitem>
            <listitem>
                <para>(n+1)!+3=1*2*3*… *(n-1)*n*(n+1)+3, azaz 3*valamennyi+3, ami osztható hárommal</para>
            </listitem>
            <listitem>
                <para>...</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n-1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n-1)*valamennyi+(n-1), ami osztható (n-1)-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+n=1*2*3*… *(n-1)*n*(n+1)+n, azaz n*valamennyi+n-, ami osztható n-el</para>
            </listitem>
            <listitem>
                <para>(n+1)!+(n+1)=1*2*3*… *(n-1)*n*(n+1)+(n-1), azaz (n+1)*valamennyi+(n+1), ami osztható (n+1)-el</para>
            </listitem>
        </itemizedlist>
        <para>
            tehát ebben a sorozatban egy prim nincs, akkor a (n+1)!+2-nél 
            kisebb első prim és a (n+1)!+ (n+1)-nél nagyobb első 
            prim között a távolság legalább n.            
        </para>    
        <para>
            Az ikerprímszám sejtés azzal foglalkozik, amikor a prímek közötti 
            távolság 2. Azt mondja, hogy az egymástól 2 távolságra lévő prímek
            végtelen sokan vannak.
        </para>    
        <para>
            A Brun tétel azt mondja, hogy az ikerprímszámok reciprokaiból képzett sor összege, azaz
            a (1/3+1/5)+ (1/5+1/7)+ (1/11+1/13)+... véges vagy végtelen sor konvergens, ami azt jelenti, hogy ezek
            a törtek összeadva egy határt adnak ki pontosan vagy azt át nem lépve növekednek, 
            ami határ számot B<subscript>2</subscript> Brun konstansnak neveznek. Tehát ez
            nem dönti el a több ezer éve nyitott kérdést, hogy az ikerprímszámok halmaza végtelen-e? 
            Hiszen ha véges sok van és ezek
            reciprokait összeadjuk, akkor ugyanúgy nem lépjük át a B<subscript>2</subscript> Brun konstans értékét, 
            mintha végtelen 
            sok lenne, de ezek már csak olyan csökkenő mértékben járulnának hozzá a végtelen sor összegéhez, 
            hogy így sem lépnék át a Brun konstans értékét.     
        </para>
        <para>
            Ebben a példában egy olyan programot készítettünk, amely közelíteni próbálja a Brun konstans értékét.
            A repó <link xlink:href="../../../bhax/attention_raising/Primek_R/stp.r">
                <filename>bhax/attention_raising/Primek_R/stp.r</filename>
            </link> mevű állománya kiszámolja az ikerprímeket, összegzi
            a reciprokaikat és vizualizálja a kapott részeredményt.
        </para>
        <programlisting language="R">
<![CDATA[#   Copyright (C) 2019  Dr. Norbert Bátfai, nbatfai@gmail.com
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
]]>
        </programlisting>        
        <para>
            Soronként értelemezzük ezt a programot:
        </para>                
        <programlisting language="R">
<![CDATA[ primes = primes(13)]]>
        </programlisting>        
        <para>
            Kiszámolja a megadott számig a prímeket.             
        </para>
        <screen>
<![CDATA[> primes=primes(13)
> primes
[1]  2  3  5  7 11 13
]]>
        </screen>
                
        <programlisting language="R">
<![CDATA[ diff = primes[2:length(primes)]-primes[1:length(primes)-1]]]>
        </programlisting>        
        <screen>
<![CDATA[> diff = primes[2:length(primes)]-primes[1:length(primes)-1]
> diff
[1] 1 2 2 4 2
]]>
        </screen>        
        <para>
            Az egymást követő prímek különbségét képzi, tehát 3-2, 5-3, 7-5, 11-7, 13-11.
        </para>
        <programlisting language="R">
<![CDATA[idx = which(diff==2)]]>
        </programlisting>        
        <screen>
<![CDATA[> idx = which(diff==2)
> idx
[1] 2 3 5
]]>
        </screen>              
        <para>
            Megnézi a <varname>diff</varname>-ben, hogy melyiknél lett kettő az eredmény, mert azok az ikerprím párok, ahol ez igaz.
            Ez a <varname>diff</varname>-ben lévő 3-2, 5-3, 7-5, 11-7, 13-11 külünbségek közül ez a 2., 3. és 5. indexűre teljesül.
        </para>
        <programlisting language="R">
<![CDATA[t1primes = primes[idx]]]>
        </programlisting>  
        <para>
            Kivette a primes-ból a párok első tagját. 
        </para>
        <programlisting language="R">
<![CDATA[t2primes = primes[idx]+2]]>
        </programlisting>        
        <para>
            A párok második tagját az első tagok kettő hozzáadásával képezzük.
        </para>
        <programlisting language="R">
<![CDATA[rt1plust2 = 1/t1primes+1/t2primes]]>
        </programlisting>        
        <para>
            Az 1/t1primes a t1primes 3,5,11 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t1primes
[1] 0.33333333 0.20000000 0.09090909
]]>
        </screen>                      
        <para>
            Az 1/t2primes a t2primes 5,7,13 értékéből az alábbi reciprokokat képzi:
        </para>
        <screen>
<![CDATA[> 1/t2primes
[1] 0.20000000 0.14285714 0.07692308
]]>
        </screen>                      
        <para>
            Az 1/t1primes + 1/t2primes pedig ezeket a törteket rendre összeadja.
        </para>
        <screen>
<![CDATA[> 1/t1primes+1/t2primes
[1] 0.5333333 0.3428571 0.1678322
]]>
        </screen>                      
        <para>
            Nincs más dolgunk, mint ezeket a törteket összeadni a 
            <function>sum</function> függvénnyel.
        </para>
        
        <programlisting language="R">
<![CDATA[sum(rt1plust2)]]>
        </programlisting>    
        <screen>
<![CDATA[>   sum(rt1plust2)
[1] 1.044023
]]>
        </screen>            
        <para>
            A következő ábra azt mutatja, hogy a szumma értéke, hogyan nő, egy határértékhez tart, a 
            B<subscript>2</subscript> Brun konstanshoz. Ezt ezzel a csipettel rajzoltuk ki, ahol először a fenti 
            számítást 13-ig végezzük, majd 10013, majd 20013-ig, egészen 990013-ig, azaz közel 1 millióig.
            Vegyük észre, hogy az ábra első köre, a 13 értékhez tartozó 1.044023.
        </para>
        <programlisting language="R">
<![CDATA[x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")]]>
        </programlisting>          
        <figure>
            <title>A B<subscript>2</subscript> konstans közelítése</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/BrunKorok.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A B<subscript>2</subscript> konstans közelítése</phrase>
                </textobject>
            </mediaobject>
        </figure>
        <para> A Brun tétel azt mondja, hogy az ikerprímszámok reciprokából képzett összege
            konvergál egy számhoz. Ezt határt Brun konstansnak nevezzük. Ezzel ellentétben a
            prímszámok a végtelen felé tartanak. </para>
        <para>
            <programlisting language="c"><![CDATA[stp <- function(x){
    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}
    ]]>
            </programlisting>
        </para>
        <para> A program először a primeket számolja ki x-ig. Ezután az egymásmellett álló prímeket
            kivonja egymásból. Az 'idx' azt nézi, hogy ha a különbség kettő, akkor azok ikerprímek.
            't1primes' változóba azokat a vizsgált számpároknak első elemét tároljuk melyeknek
            különbsége 3. </para>
        <para> 't2primes' változóba azt a vizsgált számpár második elemét mentjük, ahol a különbség
            4. Ezután jön a matek része, a függvény reciprokokat hoz létre, azokat összeadja. Ezeket
            kiírjuk, és láthatjuk merre konvergál. A prímek felső határhoz konvergálnak. </para>                             
        <tip>
            <title>Werkfilm</title>
            <itemizedlist>
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/VkMFrgBhN1g">https://youtu.be/VkMFrgBhN1g</link>
                    </para>    
                </listitem>                
                <listitem>
                    <para>
                        <link xlink:href="https://youtu.be/aF4YK6mBwf4"
                            >https://youtu.be/aF4YK6mBwf4</link>
                    </para>    
                </listitem>                
            </itemizedlist>                
        </tip>
    </section>

</chapter>                
